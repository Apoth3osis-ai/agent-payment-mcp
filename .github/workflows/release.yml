name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-go:
    name: Build Go Binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build MCP Server binaries
        run: |
          cd mcp-server

          # Windows
          GOOS=windows GOARCH=amd64 go build \
            -ldflags="-s -w" \
            -o ../distribution/binaries/windows-amd64/agent-payment-server.exe \
            ./cmd/agent-payment-server

          # macOS Intel
          GOOS=darwin GOARCH=amd64 go build \
            -ldflags="-s -w" \
            -o ../distribution/binaries/darwin-amd64/agent-payment-server \
            ./cmd/agent-payment-server

          # macOS Apple Silicon
          GOOS=darwin GOARCH=arm64 go build \
            -ldflags="-s -w" \
            -o ../distribution/binaries/darwin-arm64/agent-payment-server \
            ./cmd/agent-payment-server

          # Linux
          GOOS=linux GOARCH=amd64 go build \
            -ldflags="-s -w" \
            -o ../distribution/binaries/linux-amd64/agent-payment-server \
            ./cmd/agent-payment-server

      - name: Build Installer binaries
        run: |
          cd installer

          # Embed MCP server binaries
          mkdir -p internal/installer/binaries
          cp ../distribution/binaries/windows-amd64/agent-payment-server.exe internal/installer/binaries/windows-amd64.exe
          cp ../distribution/binaries/darwin-amd64/agent-payment-server internal/installer/binaries/darwin-amd64
          cp ../distribution/binaries/darwin-arm64/agent-payment-server internal/installer/binaries/darwin-arm64
          cp ../distribution/binaries/linux-amd64/agent-payment-server internal/installer/binaries/linux-amd64

          # Build installer for each platform - output to installer/build/
          mkdir -p build

          # Windows
          GOOS=windows GOARCH=amd64 go build \
            -ldflags="-s -w" \
            -o build/agent-payment-installer-windows-amd64.exe \
            ./cmd/installer

          # macOS Intel
          GOOS=darwin GOARCH=amd64 go build \
            -ldflags="-s -w" \
            -o build/agent-payment-installer-macos-intel \
            ./cmd/installer

          # macOS Apple Silicon
          GOOS=darwin GOARCH=arm64 go build \
            -ldflags="-s -w" \
            -o build/agent-payment-installer-macos-arm64 \
            ./cmd/installer

          # Linux
          GOOS=linux GOARCH=amd64 go build \
            -ldflags="-s -w" \
            -o build/agent-payment-installer-linux-amd64 \
            ./cmd/installer

      - name: Commit updated binaries to repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add installer/build/ installer/internal/installer/binaries/
          git diff --staged --quiet || git commit -m "Update installer binaries for ${GITHUB_REF#refs/tags/}"
          git push origin HEAD:main

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: go-binaries
          path: |
            distribution/
            installer/build/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-go
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Rename binaries for release
        run: |
          # MCP server binaries (for registry)
          mkdir -p release-binaries
          cp go-binaries/binaries/linux-amd64/agent-payment-server release-binaries/agent-payment-server
          cp go-binaries/binaries/darwin-amd64/agent-payment-server release-binaries/agent-payment-server-darwin-amd64
          cp go-binaries/binaries/darwin-arm64/agent-payment-server release-binaries/agent-payment-server-darwin-arm64
          cp go-binaries/binaries/windows-amd64/agent-payment-server.exe release-binaries/agent-payment-server-windows-amd64.exe

      - name: Calculate SHA256 hashes
        id: hashes
        run: |
          echo "linux_amd64=$(sha256sum release-binaries/agent-payment-server | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "darwin_amd64=$(sha256sum release-binaries/agent-payment-server-darwin-amd64 | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "darwin_arm64=$(sha256sum release-binaries/agent-payment-server-darwin-arm64 | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "windows_amd64=$(sha256sum release-binaries/agent-payment-server-windows-amd64.exe | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Update server.json with version and hashes
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          sed -i "s/{{VERSION}}/$VERSION/g" server.json
          sed -i "s/{{SHA256_LINUX_AMD64}}/${{ steps.hashes.outputs.linux_amd64 }}/g" server.json
          sed -i "s/{{SHA256_DARWIN_AMD64}}/${{ steps.hashes.outputs.darwin_amd64 }}/g" server.json
          sed -i "s/{{SHA256_DARWIN_ARM64}}/${{ steps.hashes.outputs.darwin_arm64 }}/g" server.json
          sed -i "s/{{SHA256_WINDOWS_AMD64}}/${{ steps.hashes.outputs.windows_amd64 }}/g" server.json
          cat server.json

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            go-binaries/installer/build/*
            release-binaries/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install MCP Publisher
        run: |
          curl -L https://github.com/modelcontextprotocol/registry/releases/download/v1.3.2/mcp-publisher_linux_amd64.tar.gz -o mcp-publisher.tar.gz
          tar -xzf mcp-publisher.tar.gz
          chmod +x mcp-publisher
          sudo mv mcp-publisher /usr/local/bin/

      - name: Authenticate with GitHub OIDC
        run: |
          mcp-publisher login github --oidc

      - name: Publish to MCP Registry
        run: |
          mcp-publisher publish
